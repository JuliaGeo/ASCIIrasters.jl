var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ASCIIrasters","category":"page"},{"location":"#ASCIIrasters","page":"Home","title":"ASCIIrasters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ASCIIrasters.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ASCIIrasters]","category":"page"},{"location":"#ASCIIrasters._check_and_parse_required-Tuple{Dict{String, Any}}","page":"Home","title":"ASCIIrasters._check_and_parse_required","text":"_check_and_parse\n\nChecks that all required header parameters are here and parses them to the convenient types.\n\n\n\n\n\n","category":"method"},{"location":"#ASCIIrasters._check_nodata-Tuple{Dict{String, Any}}","page":"Home","title":"ASCIIrasters._check_nodata","text":"_check_nodata\n\nIf NODATAvalue is a header line, keep it as nodatavalue and detect its type. If NODATAvalue is missing, we set it to -9999.0 and its type to Any.\n\n\n\n\n\n","category":"method"},{"location":"#ASCIIrasters._read_data-Tuple{AbstractString, Dict{String, Any}}","page":"Home","title":"ASCIIrasters._read_data","text":"_read_data\n\nLooks in header for a number of lines to ignore, then writes the following lines in a matrix with required element type.\n\n\n\n\n\n","category":"method"},{"location":"#ASCIIrasters._read_header-Tuple{AbstractString}","page":"Home","title":"ASCIIrasters._read_header","text":"_read_header\n\nReads the first lines that don't start with a space. Converts them to a Dict with 9 entries with all the parameters we need both for assessing data type and keeping header parameters.\n\n\n\n\n\n","category":"method"},{"location":"#ASCIIrasters.read_ascii-Tuple{AbstractString}","page":"Home","title":"ASCIIrasters.read_ascii","text":"read_ascii(filename::AbstractString) => Union{Tuple{Array, NamedTuple}, NamedTuple}\n\nReads an ASCII file. Parameters are parsed according to the AAIGrid format. Data elements are assumed to be of the same type as the nodatavalue header parameter if possible. If there is no NODATA_value field in the header, data type is estimated by checking if there are any floating numbers in the first 10 data rows.\n\nKeywords\n\nlazy: when set to true, only the header of filename will be read, and only the NamedTuple of parameters be returned.\n\nIf not lazy, returns a Tuple with: an Array of the data and a NamedTuple of the header information.\n\n\n\n\n\n","category":"method"},{"location":"#ASCIIrasters.write_ascii-Union{Tuple{T}, Tuple{AbstractString, AbstractMatrix{T}}} where T","page":"Home","title":"ASCIIrasters.write_ascii","text":"write_ascii(filename::AbstractString; kwargs...)\n\nWrites data and header in an AAIGrid raster file.\n\nArgument\n\ndat: the AbstractArray of data to write\n\nKeywords\n\nRequired:\n\nncols and nrows: numbers of columns and rows\nxll and yll: coordinates of the lower-left corner\ndx and dy: dx and dy cell sizes in coordinate units per pixel\n\nOptional:\n\nnodatavalue: a value that should be considered as representing no data. Default is -9999.0\ndetecttype: when set to true, elements of dat are converted to the same type as nodatavalue. Leave false to coerce everything (both dat and nodatavalue) to Float32.\n\nReturns the written file name.\n\n\n\n\n\n","category":"method"}]
}
